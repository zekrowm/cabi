
```{r}
# script written 12/26/2023 for Cabi Station Demographics

```


```{r}

# Load the needed libraries
library(sf)
library(dplyr)
library(rgdal)

# --- Bike Share Station Data ---

# Import bike share locations file
shapefile_dir <- "C:/Users/zach/Documents/r_stuff/cabi_project/Capital_Bikeshare_Locations"
shapefile_name <- "Capital_Bikeshare_Locations"
bike_shapefile_path <- file.path(shapefile_dir, paste0(shapefile_name, ".shp"))

# User defines current column name with bike share station names or ID in it
user_column_name <- "STATION_ID" # or "NAME" or "OBJECTID"

# Read bike share shapefile and transform CRS to WGS84
sf_bike_station_data <- st_transform(st_read(dsn = bike_shapefile_path), crs = 4326)

# Make the bike station geometry valid
sf_bike_station_data <- st_make_valid(sf_bike_station_data)

# Check and print the coordinate system of bike stations
print(st_crs(sf_bike_station_data))

# Rename the specified column to a generic name like 'StationID'
sf_bike_station_data <- sf_bike_station_data %>%
  rename(StationID = !!sym(user_column_name))

# Plot study area
plot(sf_bike_station_data$geometry, main="Bike Share Stations")



# --- Study Area Data ---

# Import study area locations file (supervisor districts)
study_shapefile_dir <- "C:/Users/zach/Documents/r_stuff/bbn_wmata_bus_demographics/Lincolnia_Planning_Study"
study_shapefile_name <- "Lincolnia_Planning_Study"
study_shapefile_path <- file.path(study_shapefile_dir, paste0(study_shapefile_name, ".shp"))

# Read study area shapefile and transform CRS to WGS84
sf_study_area_all <- st_read(dsn = study_shapefile_path) %>% 
                     st_transform(crs = 4326) %>% 
                     st_make_valid()

# Filter for only rows where the DISTRICT column value is "PROVIDENCE"
sf_study_area <- sf_study_area_all %>% 
                 filter(DISTRICT == "PROVIDENCE")

# Check and print the coordinate system of study area
print(st_crs(sf_study_area))

# Plot study area
plot(sf_study_area$geometry, main="Study Area", col = "lightblue")



# Use st_intersection to clip the bike station data to the study area
stations_within_study_area <- st_intersection(sf_bike_station_data, sf_study_area)

# Check the results
print(stations_within_study_area)

# Plot the study area and bike stations for visual confirmation
plot(sf_study_area$geometry, main="Study Area with Bike Stations", col = "lightblue")
plot(stations_within_study_area$geometry, add = TRUE, col = 'red', pch = 20)

# Plot the study area and bike stations for visual confirmation
plot(stations_within_study_area$geometry, add = TRUE, col = 'red', pch = 20)

# Print first 6 rows of filtered data 
print(stations_within_study_area[1:6,])


sf_bike_station_data <- stations_within_study_area




# --- Demographics Data ---
# CHANGES 20231226
# Define the directory and filename for the demographic shapefile.
shapefile_dir <- "C:/Users/zach/Documents/r_stuff/census_to_shp_project"
shapefile_name <- "sf_blocks_12_27_2023_subset2"
shapefile_path <- file.path(shapefile_dir, paste0(shapefile_name, ".shp"))

sf_demog_data <- st_read(dsn = shapefile_path)
sf_demog_data_simplified <- st_simplify(sf_demog_data, dTolerance = 1)
sf_demog_data_simplified <- st_transform(sf_demog_data_simplified, crs = 4326)
sf_demog_data_simplified <- st_make_valid(sf_demog_data_simplified)





# Rename data
sf_demog_data <- sf_demog_data_simplified

# Plot the results
plot(sf_demog_data)

# Check the results
print(sf_demog_data)

```


```{r}

# Ensure both sf_bike_station_data and sf_demog_data have the same CRS
sf_bike_station_data <- st_transform(sf_bike_station_data, crs = st_crs(sf_demog_data))

# Create new columns to store analysis results in sf_demog_data
sf_demog_data$og_area_acres <- 0
sf_demog_data$clip_area_acres <- 0
sf_demog_data$perc_area_acres <- 0

# Calculate area in acres before clipping and store it
sf_demog_data$og_area_acres <- st_area(sf_demog_data) / 4046.86

# Print rows from sf_demog_data
print(sf_demog_data)

# Create new columns in sf_bike_station_data to store the sums
sf_bike_station_data$Populati_1_Sum <- 0
sf_bike_station_data$Househol_1_Sum <- 0
sf_bike_station_data$MinrityP_1_Sum <- 0
sf_bike_station_data$Jobs_1_Sum <- 0
sf_bike_station_data$Populati_Nmrized_Sum <- 0
sf_bike_station_data$serv_gap <- 0
sf_bike_station_data$intersection_count <- integer(nrow(sf_bike_station_data))
sf_bike_station_data$sups_count <- integer(nrow(sf_bike_station_data))

# Extract all unique StationIDs from sf_bike_station_data
unique_StationIDs <- unique(sf_bike_station_data$StationID)

# Loop through each unique StationID in sf_bike_station_data
for (i in 1:length(unique_StationIDs)) {
  station_id <- unique_StationIDs[i]
  cat("StationID: ", station_id, "\n")

  # Buffer each bike station and combine them into a single geometry
  buffered_stations <- st_buffer(st_geometry(sf_bike_station_data[i,]), dist = 402.336)
  
  # Ensure both geometries have the same CRS before intersection
  buffered_stations_valid <- st_make_valid(buffered_stations)
  if(st_crs(buffered_stations_valid) != st_crs(sf_demog_data)) {
    buffered_stations_valid <- st_transform(buffered_stations_valid, st_crs(sf_demog_data))
  }

  # Clip sf_demog_data to the buffered station area
  sf_demog_data_clipped <- st_intersection(sf_demog_data, buffered_stations_valid)

  # Calculate the area after clipping and store it
  sf_demog_data_clipped$clip_area_acres <- st_area(sf_demog_data_clipped) / 4046.86

  # Calculate the percent of the clip and og areas and store it
  sf_demog_data_clipped$perc_area_acres <- sf_demog_data_clipped$clip_area_acres / sf_demog_data_clipped$og_area_acres

  # Calculate the sums for each attribute in sf_demog_data
  # Update these attributes based on the actual demographic data you have
  population_sum <- sum(sf_demog_data_clipped$Populati_1 * sf_demog_data_clipped$perc_area_acres, na.rm = TRUE)
  # ... continue for other demographic attributes ...

  # Assign the sums to the corresponding rows in sf_bike_station_data
  sf_bike_station_data$Populati_1_Sum[i] <- round(population_sum, 1)
  # ... continue for other demographic attributes ...

  cat("Population Sum: ", population_sum, "\n")

  # Intersection Analysis
  # If you have service gaps or other spatial layers for intersection analysis
  # For example, sf_service_gaps and sf_sup_districts as mentioned in the original script
  # Count the number of intersections with sf_service_gaps and store it in sf_bike_station_data
  intersections <- st_intersects(buffered_stations_valid, sf_service_gaps)
  intersection_count <- sum(lengths(intersections))
  sf_bike_station_data$intersection_count[i] <- intersection_count
      
  # Count the number of supervisor districts with sf_sup_districts and store it in sf_bike_station_data
  intersections2 <- st_intersects(buffered_stations_valid, sf_sup_districts)
  intersection_count2 <- sum(lengths(intersections2))
  sf_bike_station_data$sups_count[i] <- intersection_count2
  
  cat("Number of Intersections: ", intersection_count, "\n")
}

# Select the columns to print
selected_columns <- c("StationID", "Populati_1_Sum", "Househol_1_Sum", "MinrityP_1_Sum", "Jobs_1_Sum", "Populati_Nmrized_Sum")

# Randomly select 10 rows from sf_bike_station_data and print them with the selected columns
print(select(sf_bike_station_data[sample(nrow(sf_bike_station_data), 10), ], all_of(selected_columns)))

# Plot the curr_line_dissolved for the last feature (optional)
plot(buffered_stations_valid)

# Plot the clipped sf_demog_data for the last feature (optional)
plot(sf_demog_data_clipped)

```
```{r}

# Export sf file routes
shapefile_dir <- "C:/Users/zach/Documents/r_stuff/bbn_wmata_bus_demographics/BBN_GIS"
shapefile_name <- "sf_bike_station_data_demographic13"
shapefile_path <- file.path(shapefile_dir, paste0(shapefile_name, ".shp"))

# Export the sf_line_data object to a shapefile
st_write(sf_bike_station_data, dsn = shapefile_path)

# Verify the export
if (file.exists(shapefile_path)) {
  cat("Shapefile successfully exported to:", shapefile_path, "\n")
} else {
  cat("Shapefile export failed.\n")
}

```
