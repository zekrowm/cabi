# Load the needed libraries
library(sf)
library(dplyr)
library(rgdal)

# --- Bike Share Station Data ---

# Import bike share locations file
shapefile_dir <- "C:/Users/zach/Documents/r_stuff/cabi_project/Capital_Bikeshare_Locations"
shapefile_name <- "Capital_Bikeshare_Locations"
bike_shapefile_path <- file.path(shapefile_dir, paste0(shapefile_name, ".shp"))

# User defines current column name with bike share station names or ID in it
user_column_name <- "STATION_ID" # or "NAME" or "OBJECTID"

# Read bike share shapefile and transform CRS to WGS84
sf_bike_station_data <- st_transform(st_read(dsn = bike_shapefile_path), crs = 4326)

# Make the bike station geometry valid
sf_bike_station_data <- st_make_valid(sf_bike_station_data)

# Check and print the coordinate system of bike stations
print(st_crs(sf_bike_station_data))

# Rename the specified column to a generic name like 'StationID'
sf_bike_station_data <- sf_bike_station_data %>%
  rename(StationID = !!sym(user_column_name))

# Plot study area
plot(sf_bike_station_data$geometry, main="Bike Share Stations")



# --- Study Area Data ---

# Import study area locations file (supervisor districts)
study_shapefile_dir <- "C:/Users/zach/Documents/r_stuff/bbn_wmata_bus_demographics/Lincolnia_Planning_Study"
study_shapefile_name <- "Lincolnia_Planning_Study"
study_shapefile_path <- file.path(study_shapefile_dir, paste0(study_shapefile_name, ".shp"))

# Read study area shapefile and transform CRS to WGS84
sf_study_area_all <- st_read(dsn = study_shapefile_path) %>% 
                     st_transform(crs = 4326) %>% 
                     st_make_valid()

# Filter for only rows where the DISTRICT column value is "PROVIDENCE"
sf_study_area <- sf_study_area_all %>% 
                 filter(DISTRICT == "PROVIDENCE")

# Check and print the coordinate system of study area
print(st_crs(sf_study_area))

# Plot study area
plot(sf_study_area$geometry, main="Study Area", col = "lightblue")



# Use st_intersection to clip the bike station data to the study area
stations_within_study_area <- st_intersection(sf_bike_station_data, sf_study_area)

# Check the results
print(stations_within_study_area)

# Plot the study area and bike stations for visual confirmation
plot(sf_study_area$geometry, main="Study Area with Bike Stations", col = "lightblue")
plot(stations_within_study_area$geometry, add = TRUE, col = 'red', pch = 20)

# Plot the study area and bike stations for visual confirmation
plot(stations_within_study_area$geometry, add = TRUE, col = 'red', pch = 20)

# Print first 6 rows of filtered data 
print(stations_within_study_area[1:6,])


sf_bike_station_data <- stations_within_study_area




# --- Demographics Data ---
# CHANGES 20231226
# Define the directory and filename for the demographic shapefile.
shapefile_dir <- "C:/Users/zach/Documents/r_stuff/census_to_shp_project"
shapefile_name <- "sf_blocks_12_27_2023_subset2"
shapefile_path <- file.path(shapefile_dir, paste0(shapefile_name, ".shp"))

sf_demog_data <- st_read(dsn = shapefile_path)
sf_demog_data_simplified <- st_simplify(sf_demog_data, dTolerance = 1)
sf_demog_data_simplified <- st_transform(sf_demog_data_simplified, crs = 4326)
sf_demog_data_simplified <- st_make_valid(sf_demog_data_simplified)



# Use st_intersects to identify overlapping features
overlaps <- st_intersects(sf_demog_data_simplified, sf_study_area)

# Subset sf_demog_data to only include features that overlap with sf_study_area
census_within_study_area <- sf_demog_data_simplified[unlist(overlaps), ]

# Use st_intersection to clip the bike station data to the study area
#census_within_study_area <- st_intersection(sf_demog_data, sf_study_area)

sf_demog_data <- census_within_study_area

# Check the results
print(sf_demog_data)
